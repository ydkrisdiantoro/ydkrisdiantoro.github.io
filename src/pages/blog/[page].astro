---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BlogListLayout from '../../layouts/BlogListLayout.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Pagination from '../../components/Pagination.astro';
import { SITE_DESCRIPTION, SITE_TITLE, POSTS_PER_PAGE } from '../../consts';

// Astro pagination setup
export async function getStaticPaths({ paginate }: { paginate: any }) {
	const allPosts = await getCollection('blog');
	const sortedPosts = allPosts.sort(
		(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
	);
	
	return paginate(sortedPosts, { 
		pageSize: POSTS_PER_PAGE
	});
}

// Get paginated data from Astro
const page: any = (Astro.props as any).page;

// Ensure page exists (for pagination)
if (!page) {
	throw new Error('Pagination data not found. Make sure getStaticPaths is correctly implemented.');
}

const posts: CollectionEntry<'blog'>[] = page.data;

// Get all posts for category navigation (separate query for filters)
const allPosts = await getCollection('blog');
const allCategories = [...new Set(allPosts.map(post => post.data.category || 'General'))].sort();

// Dynamic page title and description based on current page
const currentPageTitle = page.currentPage === 1 
	? `Blog - ${SITE_TITLE}` 
	: `Blog - Page ${page.currentPage} - ${SITE_TITLE}`;
const pageDescription = page.currentPage === 1 
	? SITE_DESCRIPTION 
	: `${SITE_DESCRIPTION} - Page ${page.currentPage} of ${page.lastPage}`;
---

<BlogListLayout
	title={currentPageTitle}
	description={pageDescription}
	categories={allCategories}
>
	<style>
		.pagination-wrapper {
			display: flex;
			justify-content: center;
			margin-top: 4rem;
		}
		
		.no-posts {
			text-align: center;
			padding: 4rem 2rem;
			color: rgb(var(--gray));
			background: white;
			border-radius: 16px;
			border: 1px solid rgba(0, 0, 0, 0.06);
		}
		
		.no-posts h3 {
			margin-bottom: 0.5rem;
			font-size: 1.5rem;
			color: rgb(var(--gray-dark));
		}

		.no-posts p {
			font-size: 1rem;
			opacity: 0.8;
		}
		
		/* Responsive Design */
		@media (max-width: 1024px) {
			.posts-grid {
				grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
				gap: 1.25rem;
			}
		}
		
		@media (max-width: 768px) {
			.posts-grid {
				grid-template-columns: 1fr;
				gap: 1.25rem;
			}

			.post-content {
				padding: 1rem;
			}

			.post-title {
				font-size: 1rem;
			}

			.post-description {
				font-size: 0.8rem;
			}
		}
	</style>

	<script>
		// Handle category tag clicks to prevent card link activation
		document.addEventListener('DOMContentLoaded', () => {
			const categoryTags = document.querySelectorAll('.category-tag');
			categoryTags.forEach(tag => {
				tag.addEventListener('click', (e) => {
					e.stopPropagation();
				});
			});

			// Handle post card clicks
			const postCards = document.querySelectorAll('.post-card[data-href]');
			postCards.forEach(card => {
				card.addEventListener('click', (e) => {
					// Don't navigate if clicking on a category tag
					if (e.target instanceof Element && e.target.closest('.category-tag')) {
						return;
					}
					
					const href = card.getAttribute('data-href');
					if (href) {
						window.location.href = href;
					}
				});
			});
		});
	</script>

	<section class="posts-grid">
		{posts.length > 0 ? (
			posts.map((post) => (
				<article class="post-card" data-href={`/blog/${post.id}/`}>
					{post.data.heroImage && (
						<Image
							width={720}
							height={360}
							src={post.data.heroImage}
							alt={post.data.title}
							class="post-image"
						/>
					)}
					<div class="post-content">
						<div class="post-meta">
							<a 
								href={`/blog/category/${(post.data.category || 'General').toLowerCase().replace(/\s+/g, '-')}`} 
								class="category-tag"
							>
								{post.data.category || 'General'}
							</a>
							<span class="post-date"><FormattedDate date={post.data.pubDate} /></span>
						</div>
						<h2 class="post-title">
							{post.data.title}
						</h2>
						<p class="post-description">
							{post.data.description}
						</p>
						<div class="post-footer">
							<span>5 min read</span>
							<span class="read-more">
								Read More
								<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
									<path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z"/>
								</svg>
							</span>
						</div>
					</div>
				</article>
			))
		) : (
			<div class="no-posts">
				<h3>No posts found</h3>
				<p>Check back later for new content.</p>
			</div>
		)}
	</section>
	
	{page.lastPage > 1 && (
		<div class="pagination-wrapper">
			<Pagination page={page} baseUrl="/blog" />
		</div>
	)}
</BlogListLayout>
